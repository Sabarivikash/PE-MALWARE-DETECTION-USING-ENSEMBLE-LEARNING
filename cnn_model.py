import os
import pandas as pd
import numpy
import numpy as np
import pickle
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
from sklearn.externals import joblib
from sklearn.metrics import confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn import preprocessing
from sklearn.model_selection import train_test_split 
from sklearn.ensemble import RandomForestClassifier
import sklearn.ensemble as ske
from sklearn import tree, linear_model

from sklearn.metrics import classification_report
from sklearn.metrics import log_loss
from matplotlib import pyplot
from numpy import array
from sklearn import preprocessing
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score,classification,roc_curve


#CNN Libraries
import keras
from keras.callbacks import ModelCheckpoint
from keras.callbacks import EarlyStopping
from keras.models import Sequential
from keras.layers import Conv1D
from keras.layers import MaxPooling1D
from keras.layers import Flatten
from keras.layers import Dense
from keras.utils import np_utils
from keras.models import load_model
from keras.wrappers.scikit_learn import KerasClassifier
from keras.layers import Dense, Dropout, Flatten, Activation
from keras.models import load_model
from keras.layers import Dense, Dropout
from keras.layers import LSTM
from keras.layers import Input
from keras.models import Model
import keras

data = pd.read_csv('data.csv',sep='|', low_memory=False)

data.head(5)

X = data.drop(['Name','md5','legitimate'],axis=1).values
y = data['legitimate'].values


#Extra Trees
print("============================Feature Selection===============================")
extratrees = RandomForestClassifier(n_estimators=50).fit(X,y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nb_features = X_new.shape[1]



X_train, X_test, y_train, y_test =train_test_split(X_new, y ,test_size=0.2)
features = []
print('%i features identified as important:' % nb_features)


#important features sored
indices = np.argsort(extratrees.feature_importances_)[::-1][:nb_features]
for f in range(nb_features):
    print("%d. feature %s (%f)" % (f + 1, data.columns[2+indices[f]], extratrees.feature_importances_[indices[f]]))


for f in sorted(np.argsort(extratrees.feature_importances_)[::-1][:nb_features]): 
    features.append(data.columns[2+f])


open('features.pkl', 'wb').write(pickle.dumps(features)) 
print('Saved')


def plot_roc_curve(fpr, tpr):  
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()


def CNN_Model(X_train, X_test, y_train, y_test):
  global acc3
  model = Sequential()
  model.add(Dense(int(nb_features), activation='sigmoid', input_shape=(int(nb_features),)))
  model.add(Dense(27, activation='sigmoid'))
  model.add(Dropout(0.25))
  model.add(Dense(54, activation='sigmoid'))
  model.add(Dropout(0.25))
  model.add(Dense(27, activation='sigmoid'))
  model.add(Dropout(0.25))
  model.add(Dense(1, activation='sigmoid'))
  model.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.mean_squared_logarithmic_error)
  model.fit(X_train,y_train,batch_size=30,epochs=2,verbose=1, validation_data=(X_test, y_test))
  loss = model.evaluate(X_test, y_test, verbose=1, batch_size=30)
  print("Final result is {}".format(100-loss*100))
  y_pred = model.predict_classes(X_test)
  print ("CNN:Accuracy : ", accuracy_score(y_test,y_pred)*100)
  acc3=accuracy_score(y_test,y_pred)*100

  model.save('CNN.h5')
  #confusion Matrix
  matrix =confusion_matrix(y_test, y_pred)
  print(matrix)


  #ROC_AUC curve
  print('AUC: %.2f' % auc)


  #Classification Report
  print("Classification Report : ")
  target_names = ['Yes','No']
  print(classification_report(y_test, y_pred, target_names=target_names))


CNN_Model(np.array(X_train), np.array(X_test), np.array(y_train), np.array(y_test))